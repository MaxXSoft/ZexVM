    header

__data:
    def  0x8000
    def  0x4000
    def  __constant
    def  __program

__constant:
str_test:
    def  "test of "
str_colon:
    def  ": "

str_test_neg:
    def  "negative immediate number"
str_test_addition:
    def  "string addition"
str_test_clock:
    def  "clock"
str_test_file:
    def  "file"
str_test_string:
    def  "string operations"
str_test_list:
    def  "list operations"
str_array_test:
    def  str_test_neg, str_test_addition, str_test_clock
    def  str_test_file, str_test_string, str_test_list

str_test_clock_before:
    def  "before "
str_test_clock_after:
    def  "after "
str_test_clock_sleep:
    def  "sleep for 1000ms"
str_test_clock_done:
    def  "done"
str_test_file_open:
    def  "opening file "
str_test_file_path:
    def  "../test/funcs.zasm"
str_test_file_failed:
    def  "failed"
str_test_file_read:
    def  "read byte "
str_test_file_close:
    def  "file closed"
str_test_string_len:
    def  "length "
str_test_list_add:
    def  "list addition"
str_test_list_copy:
    def  "list copy"

str_temp0:
    def  "hello "
str_temp1:
    def  "world!"
str_temp2:
    def  "hello world!"

lst_temp0:
    def  1, 0, 2, 0, 3, 0, 4, 0, 5, 0
lst_temp1:
    def  6, 0, 7, 0
lst_temp2:
    def  1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0

__program:
    mov  a1, 0        ; negative immediate number
    call 0, print_test
    movl a1, -120.01e2
    int  "PutFloat"
    call 0, newline

    mov  a1, 1        ; string addition & flush
    call 0, print_test
    mov  a1, str_test_addition
    int  "AddRawString"
    int  "AddRawString"
    mov  a1, 1
    int  "Flush"
    call 0, newline
    call 0, newline

    mov  a1, 2        ; clock
    call 0, print_test
    call 0, newline
    mov  a1, str_test_clock_before
    int  "PutRawString"
    int  "GetMillisecond"
    mov  a1, rv
    int  "PutInteger"
    call 0, newline
    call 0, kill_time
    mov  a1, str_test_clock_after
    int  "PutRawString"
    int  "GetMillisecond"
    mov  a1, rv
    int  "PutInteger"
    call 0, newline
    mov  a1, str_test_clock_sleep
    int  "PutRawString"
    mov  a1, 1000
    int  "Sleep"
    call 0, newline
    mov  a1, str_test_clock_done
    int  "PutRawString"
    call 0, newline
    call 0, newline

    mov  a1, 3        ; file
    call 0, print_test
    call 0, newline
    mov  a1, str_test_file_open
    int  "PutRawString"
    mov  a1, str_test_file_path
    int  "PutRawString"
    call 0, newline
    mov  a1, str_test_file_path
    news a1
    mov  a2, 0        ; read only
    int  "OpenFile"
    dels a1
    mov  r1, 0        ; if
    eq   r1, rv
    jz   r1, main_if0_else_
    mov  a1, str_test_file_failed
    int  "PutRawString"
    call 0, newline
    jmp  main_if0_end_
main_if0_else_:
    mov  r1, rv       ; r1 = file_pointer
    mov  a1, str_test_file_read
    int  "PutRawString"
    call 0, newline
    mov  a1, r1
    int  "ReadByte"
    mov  a1, rv
    int  "PutChar"
    mov  a1, r1
    int  "Tell"
    mov  r2, rv       ; r2 = file_position
    mov  a1, r1
    mov  a2, 3
    mov  a3, 1
    int  "Seek"
    mov  a1, r1
    int  "ReadByte"
    mov  a1, rv
    int  "PutChar"
    mov  a1, r1
    int  "ReadByte"
    mov  a1, rv
    int  "PutChar"
    mov  a1, r1
    mov  a2, r2
    mov  a3, 0
    int  "Seek"
    mov  r3, 0        ; for loop
main_for0_:
    mov  r4, r3
    lt   r4, 9
    jz   r4, main_for0_end_
    mov  a1, r1
    int  "ReadByte"
    mov  a1, rv
    int  "PutChar"
    add  r3, 1
    jmp  main_for0_
main_for0_end_:
    call 0, newline
    mov  a1, r1
    int  "CloseFile"
    mov  a1, str_test_file_close
    int  "PutRawString"
    call 0, newline
main_if0_end_:
    call 0, newline

    mov  a1, 4        ; string operations
    call 0, print_test
    call 0, newline
    mov  r1, str_temp0
    news r1
    mov  r2, str_temp1
    news r2
    mov  r3, str_temp2
    news r3
    mov  a1, str_test_string_len
    int  "PutRawString"
    lens a1, r1
    int  "PutInteger"
    call 0, newline
    adds r1, r2
    mov  a1, r1
    int  "PutString"
    call 0, newline
    mov  a1, r1
    eqs  a1, r3
    int  "PutInteger"
    dels r1
    dels r2
    dels r3
    call 0, newline
    call 0, newline

    mov  a1, 5        ; list operations
    call 0, print_test
    call 0, newline
    mov  r1, lst_temp0
    newl r1, 5
    mov  r2, lst_temp1
    newl r2, 2
    mov  r3, lst_temp2
    newl r3, 7
    mov  a1, r1
    call 0, print_list
    mov  a1, str_test_list_add
    int  "PutRawString"
    call 0, newline
    addl r1, r2
    mov  a1, r1
    call 0, print_list
    mov  a1, r1
    eql  a1, r3
    int  "PutInteger"
    call 0, newline
    mov  a1, str_test_list_copy
    int  "PutRawString"
    call 0, newline
    cpl  r4, r2
    mov  a1, r4
    call 0, print_list
    dell r1
    dell r2
    dell r3
    dell r4

    end

newline:
    mov  a1, '\n'     ; 'Char' type immediate number
    int  "PutChar"
    ret

print_test:
    mul  a1, 4
    mov  a2, str_array_test
    add  a2, a1
    mov  a1, str_test
    int  "PutRawString"
    ld   a1, a2
    and  a1, 0xffffffff
    int  "PutRawString"
    mov  a1, str_colon
    int  "PutRawString"
    ret

print_list:
    lenl a2, a1
    mov  a3, 0
pl_for0_:
    mov  a4, a3
    lt   a4, a2
    jz   a4, pl_for0_end_
    mov  a4, a3
    getl a4, a1
    push a1
    mov  a1, a4
    int  "PutInteger"
    mov  a1, ' '
    int  "PutChar"
    pop  a1
    add  a3, 1
    jmp  pl_for0_
pl_for0_end_:
    call 0, newline
    ret

kill_time:
    mov  r1, 0
kt_for0_:
    mov  r2, r1
    lt   r2, 50000000
    jz   r2, kt_for0_end_
    ; do nothing
    add  r1, 1
    jmp  kt_for0_
kt_for0_end_:
    ret
